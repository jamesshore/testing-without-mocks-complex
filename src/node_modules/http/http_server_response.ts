// Copyright Titanium I.T. LLC.
import { HttpHeaders } from "http/http_headers.js";

export interface HttpServerResponseOptions {
	status: number,
	headers?: HttpHeaders,
	body: string,
	debug?: any,
}

/** Encapsulates an HTTP response for the server to serve */
export class HttpServerResponse {

	private readonly _status: number;
	private readonly _headers: HttpHeaders;
	private readonly _body: string;
	public readonly _debug?: any;

	/**
	 * Factory method. Creates an HTTP response.
	 * @param options the response details
	 * @param options.status status code
	 * @param [options.headers] headers
	 * @param options.body body
	 * @param [options.contentType] content-type header (for convenience; same as options.headers["content-type"])
	 * @param [options.debug] appears in logs, but is otherwise unused
	 * @returns {HttpServerResponse} the response
	 */
	static create(options: HttpServerResponseOptions & { contentType?: string }): HttpServerResponse {
		const { contentType, ...remainingOptions } = options;
		return new HttpServerResponse(remainingOptions, contentType);
	}

	/**
	 * Test-only factory method. Provides overridable defaults for all response details.
	 * @param [options] the response details
	 * @param options.status status code
	 * @param [options.headers] headers
	 * @param [options.body] body
	 * @param [options.contentType] content-type header (for convenience; same as options.headers["content-type"])
	 * @param [options.debug] appears in logs, but is otherwise unused
	 * @returns {HttpServerResponse} the response
	 */
	static createForTestingOnly({
		status = 200,
		headers = {},
		body = "default test body",
		contentType = undefined,
		debug = undefined,
	}: {
		status?: number,
		headers?: HttpHeaders,
		body?: string,
		contentType?: string,
		debug?: any,
	} = {}): HttpServerResponse {
		return new HttpServerResponse({ status, headers, body, debug }, contentType);
	}

	/**
	 * Convenience factory method for creating plain text responses.
	 * @param options the response details
	 * @param options.status status code
	 * @param [options.headers] headers
	 * @param options.body body
	 * @param [options.debug] appears in logs, but is otherwise unused
	 * @returns {HttpServerResponse} the response
	 */
	static createPlainTextResponse(options: HttpServerResponseOptions): HttpServerResponse {
		return new HttpServerResponse(options, "text/plain; charset=utf-8");
	}

	/**
	 * Convenience factory method for creating HTML responses.
	 * @param options the response details
	 * @param options.status status code
	 * @param [options.headers] headers
	 * @param options.body body
	 * @param [options.debug] appears in logs, but is otherwise unused
	 * @returns {HttpServerResponse} the response
	 */
	static createHtmlResponse(options: HttpServerResponseOptions): HttpServerResponse {
		return new HttpServerResponse(options, "text/html; charset=utf-8");
	}

	/**
	 * Convenience factory method for creating JSON responses.
	 * @param options the response details
	 * @param options.status status code
	 * @param [options.headers] headers
	 * @param options.body body
	 * @param [options.debug] appears in logs, but is otherwise unused
	 * @returns {HttpServerResponse} the response
	 */
	static createJsonResponse(options: Omit<HttpServerResponseOptions, "body"> & { body: Record<string, any>}): HttpServerResponse {
		const newOptions = { ...options, body: JSON.stringify(options.body) };
		return new HttpServerResponse(newOptions, "application/json");
	}

	/** Only for use by tests. (Use a factory method instead.) */
	constructor(options: HttpServerResponseOptions, contentType?: string) {
		this._status = options.status;
		const contentTypeHeaders = contentType !== undefined ?
			{ "content-type": contentType } :
			{} as Record<never, never>;
		this._headers = { ...contentTypeHeaders, ...options.headers };
		this._body = options.body;

		// We provide this field so it can be viewed in failing tests. It's not used in any way.
		if (options.debug instanceof Error) this._debug = options.debug.stack;
		else if (options.debug !== undefined) this._debug = options.debug;
	}

	/**
	 * @returns {number} status code
	 */
	get status(): number {
		return this._status;
	}

	/**
	 * @returns {object} headers
	 */
	get headers(): HttpHeaders {
		return this._headers;
	}

	/**
	 * @returns {string} body
	 */
	get body(): string {
		return this._body;
	}

}
