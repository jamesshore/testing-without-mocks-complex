// Copyright Titanium I.T. LLC.
import { OutputListener, OutputTracker } from "util/output_listener.js";

export interface NulledCommandLineResponses {
	args?: string[];
}

export type CommandLineOutput = string;

/** Wrapper for command-line processing */
export class CommandLine {

	private readonly _stdoutListener: OutputListener<CommandLineOutput>;
	private readonly _stderrListener: OutputListener<CommandLineOutput>;

	/**
	 * Factory method. Wraps the current process arguments, stdout, and stderr.
	 * @returns {CommandLine} the wrapped process
	 */
	static create(): CommandLine {
		return new CommandLine(process);
	}

	/**
	 * Factory method. Simulates process arguments and discards writes to stdout and stderr.
	 * @param [args] simulated process arguments
	 * @returns {CommandLine} the simulated process
	 */
	static createNull({
		args = []
	}: NulledCommandLineResponses = {}) {
		return new CommandLine(new StubbedProcess(args));
	}

	/** Only for use by tests. (Use a factory method instead.) */
	constructor(private readonly _process: Process) {
		this._stdoutListener = new OutputListener();
		this._stderrListener = new OutputListener();
	}

	/**
	 * @returns {string[]} arguments to the current process, not including 'node' or the name of the script
	 */
	args(): string[] {
		return this._process.argv.slice(2);
	}

	/**
	 * Write to stdout.
	 * @param text the text to write
	 */
	writeStdout(text: string): void {
		this._process.stdout.write(text);
		this._stdoutListener.emit(text);
	}

	/**
	 * Write to stderr.
	 * @param text the text to write
	 */
	writeStderr(text: string): void {
		this._process.stderr.write(text);
		this._stderrListener.emit(text);
	}

	/**
	 * Track writes to stdout.
	 * @returns {OutputTracker} the output tracker
	 */
	trackStdout(): OutputTracker<CommandLineOutput> {
		return this._stdoutListener.trackOutput();
	}

	/**
	 * Track writes to stderr.
	 * @returns {OutputTracker} the output tracker
	 */
	trackStderr(): OutputTracker<CommandLineOutput> {
		return this._stderrListener.trackOutput();
	}

}


interface Stream {
	write(text: string): void
}

interface Process {
	get argv(): string[];
	get stdout(): Stream;
	get stderr(): Stream;
}

class StubbedProcess {

	constructor(private readonly _args: string[]) {
	}

	get argv(): string[] {
		return [ "stubbed_process_node", "stubbed_process_script.js", ...this._args ];
	}

	get stdout(): Stream {
		return {
			write() {},
		};
	}

	get stderr(): Stream {
		return {
			write() {},
		};
	}

}