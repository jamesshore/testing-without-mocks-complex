// Copyright Titanium I.T. LLC.
import assert from "util/assert.js";
import { Log } from "infrastructure/log.js";
import { CommandLine } from "infrastructure/command_line.js";
import { Clock } from "infrastructure/clock.js";
// dependency_analysis: ./_log_test_output_runner
// dependency_analysis: ./_log_test_null_output_runner

describe("Log", () => {

	it("writes current time and structured data to stdout", async () => {
		const { log, stdout } = createLog({ now: 0 });
		log.info({ output: "my output" });

		assert.deepEqual(stdout.data, [
			'Jan 1, 1970, 00:00:00 UTC {"alert":"info","output":"my output"}\n',
		]);
	});

	it("outputs full stack trace for errors", () => {
		const { log, stdout } = createLog({ now: 0 });

		const data = {
			output: new Error("my error"),
		};
		log.info(data);
		assert.match(stdout.data[0], /"output":"Error: my error\\n    at /);
	});

	it("provides multiple alert levels", () => {
		const { log, stdout } = createLog({ now: 0 });

		log.debug({});
		log.info({});
		log.monitor({});
		log.action({});
		log.emergency({});

		assert.deepEqual(stdout.data, [
			'Jan 1, 1970, 00:00:00 UTC {"alert":"debug"}\n',
			'Jan 1, 1970, 00:00:00 UTC {"alert":"info"}\n',
			'Jan 1, 1970, 00:00:00 UTC {"alert":"monitor"}\n',
			'Jan 1, 1970, 00:00:00 UTC {"alert":"action"}\n',
			'Jan 1, 1970, 00:00:00 UTC {"alert":"emergency"}\n',
		]);
	});


	describe("tracking", () => {

		it("tracks output", () => {
			const { log, output } = createLog();

			log.info({
				output: "my output",
			});

			assert.deepEqual(output.data, [{
				alert: "info",
				output: "my output",
			}]);
		});

		it("strips stack traces from errors", () => {
			const { log, output } = createLog();

			log.info({
				output: new Error("my error"),
			});

			assert.deepEqual(output.data, [{
				alert: "info",
				output: "Error: my error",
			}]);
		});

	});


	describe("binding", () => {

		it("adds default fields to every message", () => {
			const { log, output } = createLog();

			const boundLog = log.bind({ "my-default": "my-value" });
			boundLog.info({ message: "my-message" });

			assert.deepEqual(output.data, [{
				alert: "info",
				"my-default": "my-value",
				message: "my-message",
			}]);
		});

		it("exposes defaults", () => {
			const { log } = createLog();

			const boundLog = log.bind({ "my-default": "my-value" });
			assert.deepEqual(boundLog.defaults, { "my-default": "my-value" }, "bound log should have defaults");
			assert.deepEqual(log.defaults, {}, "parent log shouldn't have any defaults");
		});

		it("can bind multiple times (and later bindings override earlier bindings)", () => {
			const { log } = createLog();

			const bind1 = log.bind({ binding: "one", bind1: true });
			assert.deepEqual(bind1.defaults, {
				binding: "one",
				bind1: true,
			}, "bind1");

			const bind2 = bind1.bind({ binding: "two", bind2: true });
			assert.deepEqual(bind2.defaults, {
				binding: "two",
				bind1: true,
				bind2: true,
			}, "bind2");

			const bind3 = bind2.bind({ binding: "three", bind3: true });
			assert.deepEqual(bind3.defaults, {
				binding: "three",
				bind1: true,
				bind2: true,
				bind3: true,
			}, "bind3");
		});

		it("bound logs share a single tracker", () => {
			const { log, output } = createLog();

			const bind1 = log.bind({ bind1: true });
			const bind2 = bind1.bind({ bind2: true });

			log.info({ message: "original log" });
			bind1.info({ message: "bind1" });
			bind2.info({ message: "bind2" });

			assert.deepEqual(output.data, [
				{
					alert: "info",
					message: "original log",
				}, {
					alert: "info",
					bind1: true,
					message: "bind1",
				}, {
					alert: "info",
					bind1: true,
					bind2: true,
					message: "bind2",
				},
			]);
		});

	});

});


function createLog({
	now = 4200000,
}: {
	now?: number,
} = {}) {
	const commandLine = CommandLine.createNull();
	const stdout = commandLine.trackStdout();

	const clock = Clock.createNull({ now });

	const log = new Log(commandLine, clock);
	const output = log.trackOutput();

	return { log, stdout, output };
}
