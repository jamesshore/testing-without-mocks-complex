// Copyright Titanium I.T. LLC.
import EventEmitter from "node:events";

const EVENT = "event";

/**
 * A helper class for implementing the Output Tracker pattern.
 * https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#output-tracking
 */
export class OutputListener<T> {

	private readonly _emitter: EventEmitter;

	/**
	 * Factory method. Creates an object that listens for events and provides the ability
	 * to track those events.
	 * @returns {OutputListener} the listener
	 */
	static create<T>(): OutputListener<T> {
		return new OutputListener<T>();
	}

	/** Only for use by tests. (Use a factory method instead.) */
	constructor() {
		this._emitter = new EventEmitter();
	}

	/**
	 * Create an OutputTracker that records any future events emitted to this listener. Each
	 * OutputTracker is independent.
	 * @returns {OutputTracker} the output tracker
	 */
	trackOutput(): OutputTrackerInternal<T> {
		return new OutputTrackerInternal<T>(this._emitter, EVENT);
	}

	/**
	 * Emit an event. The event will be tracked by any active OutputTrackers. Does nothing if no
	 * OutputTrackers have been created.
	 * @param data
	 */
	emit(data: T): void {
		this._emitter.emit(EVENT, data);
	}

}


/** Tracks output. See https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#output-tracking */
class OutputTrackerInternal<T> {

	private readonly _data: T[];
	private readonly _trackerFn: (data: T) => void;

	/** Only for use by tests. (Use a factory method instead.) */
	constructor(private readonly _emitter: EventEmitter, private readonly _event: typeof EVENT) {
		this._data = [];

		this._trackerFn = (data) => this._data.push(data);
		this._emitter.on(this._event, this._trackerFn);
	}

	/**
	 * @returns {[]} all output that has been tracked so far
	 */
	get data(): readonly T[] {
		return this._data;
	}

	/**
	 * Clear previously tracked data and start over.
	 * @returns {[]} all output that was tracked prior to being cleared
	 */
	clear(): readonly T[] {
		const result = [ ...this._data ];
		this._data.length = 0;
		return result;
	}

	/**
	 * Stop tracking.
	 */
	stop(): void {
		this._emitter.off(this._event, this._trackerFn);
	}

}

export type OutputTracker<T> = OutputTrackerInternal<T>;